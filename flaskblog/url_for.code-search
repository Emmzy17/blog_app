# Query: 
# ContextLines: 1

43 results - 9 files

flaskblog\posts\routes.py:
   1: from flask import (render_template, url_for, flash, abort, request, redirect, Blueprint)
   2  from flask_login import login_required, current_user

  17          flash('Your post has been created!', 'success')
  18:         return redirect(url_for('home'))
  19      return render_template('create_post.html', title ='New Post',  form=form, legend = 'New post')

  37          flash('Your post has been updated!', 'success')
  38:         return redirect(url_for('post', post_id = post.id))
  39      elif request.method == 'GET':

  52      flash('Your post has been deleted', 'danger')
  53:     return redirect(url_for('home'))

flaskblog\templates\home.html:
   4         <article class="media content-section">
   5:            <img class = 'rounded-circle article-img' src="{{ url_for ('static', filename = 'profile_pic/' + post.author.img_file)}}">
   6             <div class="media-body">
   7                  <div class="article-metadata">
   8:                     <a class="mr-2" href="{{ url_for('user_posts', username = post.author.username)}}" style="text-decoration: none;"> {{ post.author.username }} </a>
   9                      <small class="text-muted"> {{ post.date_posted.strftime('%Y-%m-%d') }} </small>
  10                  </div>
  11:                 <h2><a class="article-title" href ="{{ url_for('post', post_id=post.id) }}" style="text-decoration: none;" > {{ post.title }} </a></h2>
  12                  <p class="article-content"> {{ post.content }} </p>

  18              {% if posts.page == page_num %}
  19:                 <a class="btn btn-info mb-4" href="{{ url_for('home', page=page_num) }}"> {{ page_num }}</a>
  20              {% else %} 
  21:                 <a class="btn btn-outline-info mb-4" href="{{ url_for('home', page=page_num) }}"> {{ page_num }}</a>
  22              {% endif %}

flaskblog\templates\layout.html:
   9      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  10:     <link href="{{ url_for('static', filename='main.css') }}" rel="stylesheet" >
  11      {% if title %}

  32                  {% if current_user.is_authenticated %}
  33:                   <a class="nav-item nav-link" href="{{ url_for('new_post') }}"> New Post</a>
  34:                   <a class="nav-item nav-link" href="{{ url_for('account') }}">Account</a>
  35:                   <a class="nav-item nav-link" href="{{ url_for('logout') }}">Logout</a>
  36                   
  37                    {% else %}
  38:                   <a class="nav-item nav-link" href="{{ url_for('login') }}">Login</a>
  39:                   <a class="nav-item nav-link" href=" {{ url_for('register') }}">Register</a>
  40                  {% endif %}

flaskblog\templates\login.html:
  48              <small class="text-muted">
  49:                 <a href="{{ url_for('reset_request') }}"> Forgot Password </a>
  50              </small>

  53              <small class="text-muted"> 
  54:                 Need an account? <a class="ml-2>" href="{{ url_for('register') }}"></a> 
  55              </small>

flaskblog\templates\post.html:
   6      <article class="media content-section">
   7:         <img class = 'rounded-circle article-img' src="{{ url_for ('static', filename = 'profile_pic/' + post.author.img_file)}}">
   8          <div class="media-body">
   9              <div class="article-metadata">
  10:                 <a class="mr-2" href="{{ url_for('user_posts', username = post.author.username)}}" style="text-decoration: none;"> {{ post.author.username }} </a>
  11                  <small class="text-muted"> {{ post.date_posted.strftime('%Y-%m-%d') }} </small>

  13                      <div >
  14:                         <a class="btn btn-secondary btn-sm mt-1 mb-1" href="{{ url_for('update_post', post_id = post.id) }}"> Update</a>
  15                          <button type="button" class="btn btn-danger btn-sm m-1" data-toggle="modal" data-target="#deleteModalLabel"> Delete </button>

  34                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
  35:                 <form action="{{ url_for('delete_post', post_id=post.id) }}" method="POST">
  36                      <input class="btn btn-danger" id = "btnDel" type="submit" value="Delete">

flaskblog\templates\register.html:
  72          <small class="text-muted">
  73:             Already have an account <a class="ml-2" href="{{ url_for('login') }}"> Sign In </a>
  74          </small>

flaskblog\templates\user_posts.html:
   6         <article class="media content-section">
   7:            <img class = 'rounded-circle article-img' src="{{ url_for ('static', filename = 'profile_pic/' + post.author.img_file)}}">
   8             <div class="media-body">
   9                  <div class="article-metadata">
  10:                     <a class="mr-2" href="{{ url_for('user_posts', username = post.author.username)}}" style="text-decoration: none;"> {{ post.author.username }} </a>
  11                      <small class="text-muted"> {{ post.date_posted.strftime('%Y-%m-%d') }} </small>
  12                  </div>
  13:                 <h2><a class="article-title" href ="{{ url_for('post', post_id=post.id) }}" style="text-decoration: none;" > {{ post.title }} </a></h2>
  14                  <p class="article-content"> {{ post.content }} </p>

  20              {% if posts.page == page_num %}
  21:                 <a class="btn btn-info mb-4" href="{{ url_for('user_posts', username=user.username,  page=page_num) }}"> {{ page_num }}</a>
  22              {% else %} 
  23:                 <a class="btn btn-outline-info mb-4" href="{{ url_for('user_posts', username=user.username, page=page_num) }}"> {{ page_num }}</a>
  24              {% endif %}

flaskblog\users\routes.py:
    1: from flask import render_template, url_for, flash, redirect, request, Blueprint
    2  from flask_login import login_user, login_required, current_user, logout_user

   12      if current_user.is_authenticated:
   13:         return redirect(url_for('home'))
   14      form = Registration()

   20          flash(f'Your account has been created! You can now login', 'success')
   21:         return redirect(url_for('login'))
   22      return render_template('register.html', title = 'Register', form=form)

   26      if current_user.is_authenticated:
   27:         return redirect(url_for('home'))
   28      form = Login()

   34          
   35:             return  redirect(url_for(next_page[1:])) if next_page else redirect(url_for('home'))
   36          else:

   43      logout_user()
   44:     return redirect(url_for('home'))
   45  

   58          flash('Your account has been updated!', 'success')
   59:         return redirect(url_for('account'))
   60      elif request.method == 'GET':

   62          form.email.data = current_user.email
   63:     image_file = url_for('static', filename = f'profile_pic/{current_user.img_file}'  )
   64      return render_template('account.html', title='Account', image_file = image_file, form = form)

   77      if current_user.is_authenticated:
   78:         return redirect(url_for('home'))
   79      form = RequestResetForm()

   83          flash('An email has been sent to you with instructions to reset your password', 'info')
   84:         return redirect(url_for('login'))
   85      return render_template('reset_request.html', title = 'Reset Password', form = form)

   89      if current_user.is_authenticated:
   90:         return redirect(url_for('home'))
   91      user = User.verify_reset_token(token)

   93          flash('This is an invalid or expired token', 'warning')
   94:         return redirect(url_for('reset_request'))
   95      form = ResetPasswordForm

  100          flash(f'Your password  has been updated! You can now login', 'success')
  101:         return redirect(url_for('login'))
  102      return redirect('reset_token.html', title = 'Reset Password', form = form)

flaskblog\users\utils.py:
   3  from PIL import Image
   4: from flask import url_for
   5  from flask_mail import Message

  25              To reset your password visit the following link:
  26:             {url_for('reset_token', token=token, _external = True )}
  27              
